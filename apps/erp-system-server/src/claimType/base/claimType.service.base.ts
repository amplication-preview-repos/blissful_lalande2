/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ClaimType as PrismaClaimType,
  Claim as PrismaClaim,
} from "@prisma/client";

export class ClaimTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClaimTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.claimType.count(args);
  }

  async claimTypes<T extends Prisma.ClaimTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimTypeFindManyArgs>
  ): Promise<PrismaClaimType[]> {
    return this.prisma.claimType.findMany<Prisma.ClaimTypeFindManyArgs>(args);
  }
  async claimType<T extends Prisma.ClaimTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimTypeFindUniqueArgs>
  ): Promise<PrismaClaimType | null> {
    return this.prisma.claimType.findUnique(args);
  }
  async createClaimType<T extends Prisma.ClaimTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimTypeCreateArgs>
  ): Promise<PrismaClaimType> {
    return this.prisma.claimType.create<T>(args);
  }
  async updateClaimType<T extends Prisma.ClaimTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimTypeUpdateArgs>
  ): Promise<PrismaClaimType> {
    return this.prisma.claimType.update<T>(args);
  }
  async deleteClaimType<T extends Prisma.ClaimTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimTypeDeleteArgs>
  ): Promise<PrismaClaimType> {
    return this.prisma.claimType.delete(args);
  }

  async findClaims(
    parentId: string,
    args: Prisma.ClaimFindManyArgs
  ): Promise<PrismaClaim[]> {
    return this.prisma.claimType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .claims(args);
  }
}
