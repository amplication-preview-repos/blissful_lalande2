/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Claim as PrismaClaim,
  ClaimType as PrismaClaimType,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class ClaimServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClaimCountArgs, "select">): Promise<number> {
    return this.prisma.claim.count(args);
  }

  async claims<T extends Prisma.ClaimFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimFindManyArgs>
  ): Promise<PrismaClaim[]> {
    return this.prisma.claim.findMany<Prisma.ClaimFindManyArgs>(args);
  }
  async claim<T extends Prisma.ClaimFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimFindUniqueArgs>
  ): Promise<PrismaClaim | null> {
    return this.prisma.claim.findUnique(args);
  }
  async createClaim<T extends Prisma.ClaimCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimCreateArgs>
  ): Promise<PrismaClaim> {
    return this.prisma.claim.create<T>(args);
  }
  async updateClaim<T extends Prisma.ClaimUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimUpdateArgs>
  ): Promise<PrismaClaim> {
    return this.prisma.claim.update<T>(args);
  }
  async deleteClaim<T extends Prisma.ClaimDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimDeleteArgs>
  ): Promise<PrismaClaim> {
    return this.prisma.claim.delete(args);
  }

  async getClaimType(parentId: string): Promise<PrismaClaimType | null> {
    return this.prisma.claim
      .findUnique({
        where: { id: parentId },
      })
      .claimType();
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.claim
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
